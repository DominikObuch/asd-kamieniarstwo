"use strict";

var prom = new Promise(function (resolve, reject) {
  var xhr = new XMLHttpRequest();
  var url = window.location.pathname;
  var filename = url.substring(url.lastIndexOf('/') + 1);
  filename = filename.substr(0, filename.length - 5); //remove ".html" from it 

  xhr.open("GET", "".concat(window.location.href.substring(0, window.location.href.lastIndexOf("/")), "/js/dataJSON/").concat(filename, ".json"), true);
  xhr.addEventListener('load', function () {
    resolve(this.response);
  });
  xhr.send();
});
prom.then(function (value) {
  var response = JSON.parse(value);
  pages.data = response.data;
  pages.overwriteCurrent();
}); //if in the future u will read it, just know I didn't know how the sql and any back-end language works and the customer didn't like cms so i had to do it like that :/ 

var pages = {
  lastShown: 0,
  currentShown: null,
  currentPage: 1,
  articleEl: [//there are all the dom nodes I will change
  document.getElementsByClassName("products__heading"), document.getElementsByClassName("d-category"), document.getElementsByClassName("d-granite"), document.getElementsByClassName("d-width"), document.getElementsByClassName("d-height"), document.getElementsByClassName("d-price"), document.getElementsByClassName("products__image")],
  scrollTop: function scrollTop() {
    document.getElementById("scroll-top").scrollIntoView({
      behavior: 'smooth'
    });
  },
  containersEl: document.getElementsByClassName("products__card"),
  overwriteCurrent: function overwriteCurrent() {
    var i = 0;

    for (this.currentShown = this.lastShown; this.currentShown < this.containersEl.length + this.lastShown; this.currentShown++) {
      //this one for current article 
      for (var x = 0; x < this.articleEl.length; x++) {
        //this one for specyfic property
        if (this.data[this.currentShown] == undefined) {
          this.containersEl[i].classList.add("d-none");
        } else if (this.articleEl[x][i] != undefined) {
          this.articleEl[x][i].textContent = this.data[this.currentShown][x];
        }
      } // another one for image changing


      if (this.data[this.currentShown] !== undefined) {
        this.articleEl[6][i].src = this.data[this.currentShown][6];
      }

      i++;
    }
  }
};

function animSwitchSite(i) {
  for (var _i = 0; _i < document.getElementsByClassName("products__card").length; _i++) {
    document.getElementsByClassName("products__card")[_i].classList.add("reload-page");
  }

  pages.scrollTop();

  for (var _i2 = 0; _i2 < document.getElementsByClassName("products__card").length; _i2++) {
    document.getElementsByClassName("products__card")[_i2].addEventListener("animationend", function () {
      this.classList.remove("reload-page");
    });
  }
}

$(function () {
  (function (name) {
    var container = $('#pagination-' + name);

    var sources = function () {
      var result = [];

      for (var i = 1; i <= Math.ceil(pages.data.length / pages.articleEl[0].length); i++) {
        result.push(i);
      }

      return result;
    }();

    var options = {
      dataSource: sources,
      ulClassName: "products__list-point",
      pageSize: 1,
      autoHidePrevious: true,
      autoHideNext: true,
      callback: function callback(response, pagination) {
        amount = pagination.pageNumber - pages.currentPage;
        animSwitchSite();

        if (pages.lastShown + pages.containersEl.length <= pages.data.length) {
          //checks if there are still some articles
          pages.lastShown += pages.containersEl.length * amount; // adds pages 

          for (var i = 0; i < pages.containersEl.length; i++) {
            // shows the unseen articles 
            pages.containersEl[i].classList.remove("d-none");
          }

          pages.currentPage += amount;
          pages.overwriteCurrent();
        }
      }
    };
    container.pagination(options);
  })('cont');
});
document.getElementById("vid").addEventListener("loadeddata", function () {
  for (var i = 0; i < document.getElementsByClassName("menu__list-cont").length; i++) {
    document.getElementsByClassName("menu__list-cont")[i].classList.remove("zero-opacity");
  }
});
var menu = {
  isShowed: false,
  childNumber: null,
  currentElShow: undefined,
  toggle: function toggle() {
    this.isShowed = !this.isShowed;
    document.getElementsByClassName("menu__list-cont")[this.childNumber].classList.toggle("menu__show");
  },
  secondClicked: function secondClicked() {
    if (this.target !== document.getElementsByClassName("menu__list-cont")[menu.childNumber]) {
      menu.toggle();
    }
  },
  clicked: function clicked() {
    if (this.isShowed) {
      document.getElementsByClassName("menu__show")[0].addEventListener("transitionend", menu.secondClicked);

      if (menu.isShowed) {
        menu.isShowed = !menu.isShowed;
        document.getElementsByClassName("menu__show")[0].classList.remove("menu__show");
      }
    } else {
      this.toggle();
    }
  }
};

var _loop = function _loop(i) {
  document.getElementsByClassName("menu")[i].addEventListener("click", function (e) {
    menu.childNumber = i;
    menu.currentElShow = e.target;
    menu.clicked();
    document.getElementsByClassName("menu__list-cont")[menu.childNumber].removeEventListener("transitionend", menu.secondClicked);
  });
};

for (var i = 0; i < document.getElementsByClassName("menu").length; i++) {
  _loop(i);
}

var zoomed = {
  images: document.getElementsByClassName("products__image"),
  appearZoom: function appearZoom(el) {
    this.currentImgSrc = el.target.src;
    this.zoomEl.childNodes[1].childNodes[1].src = this.currentImgSrc;
    this.zoomEl.classList.remove("no-zoom");
  },
  disappearZoom: function disappearZoom(el) {
    if (el.target !== document.getElementsByClassName("zoomed__image")[0]) {
      this.zoomEl.classList.add("no-zoom");
    }
  },
  currentImgSrc: null,
  zoomEl: document.getElementById("zoomEl")
};

for (var i = 0; i < zoomed.images.length; i++) {
  zoomed.images[i].addEventListener("click", function (el) {
    zoomed.appearZoom(el);
  });
}

zoomed.zoomEl.addEventListener("click", function (el) {
  zoomed.disappearZoom(el);
});