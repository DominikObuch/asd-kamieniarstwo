"use strict";

function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*!
 * @name        easyzoom
 * @author       <>
 * @modified    Thursday, November 22nd, 2018
 * @version     2.5.2
 */
!function (t, e) {
  "use strict";

  "function" == typeof define && define.amd ? define(["jquery"], function (t) {
    e(t);
  }) : "object" == (typeof module === "undefined" ? "undefined" : _typeof(module)) && module.exports ? module.exports = t.EasyZoom = e(require("jquery")) : t.EasyZoom = e(t.jQuery);
}(void 0, function (i) {
  "use strict";

  var c,
      d,
      l,
      p,
      u,
      f,
      o = {
    loadingNotice: "Loading image",
    errorNotice: "The image could not be loaded",
    errorDuration: 2500,
    linkAttribute: "href",
    preventClicks: !0,
    beforeShow: i.noop,
    beforeHide: i.noop,
    onShow: i.noop,
    onHide: i.noop,
    onMove: i.noop
  };

  function s(t, e) {
    this.$target = i(t), this.opts = i.extend({}, o, e, this.$target.data()), void 0 === this.isOpen && this._init();
  }

  return s.prototype._init = function () {
    this.$link = this.$target.find("a"), this.$image = this.$target.find("img"), this.$flyout = i('<div class="easyzoom-flyout" />'), this.$notice = i('<div class="easyzoom-notice" />'), this.$target.on({
      "mousemove.easyzoom touchmove.easyzoom": i.proxy(this._onMove, this),
      "mouseleave.easyzoom touchend.easyzoom": i.proxy(this._onLeave, this),
      "mouseenter.easyzoom touchstart.easyzoom": i.proxy(this._onEnter, this)
    }), this.opts.preventClicks && this.$target.on("click.easyzoom", function (t) {
      t.preventDefault();
    });
  }, s.prototype.show = function (t, e) {
    var o = this;

    if (!1 !== this.opts.beforeShow.call(this)) {
      if (!this.isReady) return this._loadImage(this.$link.attr(this.opts.linkAttribute), function () {
        !o.isMouseOver && e || o.show(t);
      });
      this.$target.append(this.$flyout);
      var i = this.$target.outerWidth(),
          s = this.$target.outerHeight(),
          h = this.$flyout.width(),
          n = this.$flyout.height(),
          a = this.$zoom.width(),
          r = this.$zoom.height();
      (c = a - h) < 0 && (c = 0), (d = r - n) < 0 && (d = 0), l = c / i, p = d / s, this.isOpen = !0, this.opts.onShow.call(this), t && this._move(t);
    }
  }, s.prototype._onEnter = function (t) {
    var e = t.originalEvent.touches;
    this.isMouseOver = !0, e && 1 != e.length || (t.preventDefault(), this.show(t, !0));
  }, s.prototype._onMove = function (t) {
    this.isOpen && (t.preventDefault(), this._move(t));
  }, s.prototype._onLeave = function () {
    this.isMouseOver = !1, this.isOpen && this.hide();
  }, s.prototype._onLoad = function (t) {
    t.currentTarget.width && (this.isReady = !0, this.$notice.detach(), this.$flyout.html(this.$zoom), this.$target.removeClass("is-loading").addClass("is-ready"), t.data.call && t.data());
  }, s.prototype._onError = function () {
    var t = this;
    this.$notice.text(this.opts.errorNotice), this.$target.removeClass("is-loading").addClass("is-error"), this.detachNotice = setTimeout(function () {
      t.$notice.detach(), t.detachNotice = null;
    }, this.opts.errorDuration);
  }, s.prototype._loadImage = function (t, e) {
    var o = new Image();
    this.$target.addClass("is-loading").append(this.$notice.text(this.opts.loadingNotice)), this.$zoom = i(o).on("error", i.proxy(this._onError, this)).on("load", e, i.proxy(this._onLoad, this)), o.style.position = "absolute", o.src = t;
  }, s.prototype._move = function (t) {
    if (0 === t.type.indexOf("touch")) {
      var e = t.touches || t.originalEvent.touches;
      u = e[0].pageX, f = e[0].pageY;
    } else u = t.pageX || u, f = t.pageY || f;

    var o = this.$target.offset(),
        i = f - o.top,
        s = u - o.left,
        h = Math.ceil(i * p),
        n = Math.ceil(s * l);
    if (n < 0 || h < 0 || c < n || d < h) this.hide();else {
      var a = -1 * h,
          r = -1 * n;
      this.$zoom.css({
        top: a,
        left: r
      }), this.opts.onMove.call(this, a, r);
    }
  }, s.prototype.hide = function () {
    this.isOpen && !1 !== this.opts.beforeHide.call(this) && (this.$flyout.detach(), this.isOpen = !1, this.opts.onHide.call(this));
  }, s.prototype.swap = function (t, e, o) {
    this.hide(), this.isReady = !1, this.detachNotice && clearTimeout(this.detachNotice), this.$notice.parent().length && this.$notice.detach(), this.$target.removeClass("is-loading is-ready is-error"), this.$image.attr({
      src: t,
      srcset: i.isArray(o) ? o.join() : o
    }), this.$link.attr(this.opts.linkAttribute, e);
  }, s.prototype.teardown = function () {
    this.hide(), this.$target.off(".easyzoom").removeClass("is-loading is-ready is-error"), this.detachNotice && clearTimeout(this.detachNotice), delete this.$link, delete this.$zoom, delete this.$image, delete this.$notice, delete this.$flyout, delete this.isOpen, delete this.isReady;
  }, i.fn.easyZoom = function (e) {
    return this.each(function () {
      var t = i.data(this, "easyZoom");
      t ? void 0 === t.isOpen && t._init() : i.data(this, "easyZoom", new s(this, e));
    });
  }, s;
});
var prom = new Promise(function (resolve, reject) {
  var xhr = new XMLHttpRequest();
  var url = window.location.pathname;
  var filename = url.substring(url.lastIndexOf('/') + 1);
  filename = filename.substr(0, filename.length - 5); //remove ".html" from it 

  var fullurl = window.location.href.substring(0, window.location.href.lastIndexOf("/"));
  fullurl = fullurl.substring(0, fullurl.lastIndexOf("/"));
  fullurl = "".concat(fullurl, "/js/dataJSON/").concat(filename, ".json");
  xhr.open("GET", fullurl, true);
  xhr.addEventListener('load', function () {
    resolve(this.response);
  });
  xhr.send();
});
prom.then(function (value) {
  var response = JSON.parse(value);
  pages.data = response.data;
  pages.imageSrc = response.src;
  pages.letterNumber = response.letterNumber;
  var name = 'cont';
  var container = $('#pagination-' + name);

  var sources = function () {
    var result = [];

    for (var i = 1; i <= Math.ceil(pages.data.length / pages.articleEl[0].length); i++) {
      result.push(i);
    }

    return result;
  }();

  var options = {
    dataSource: sources,
    ulClassName: "products__list-point",
    pageSize: 1,
    autoHidePrevious: true,
    autoHideNext: true,
    callback: function callback(response, pagination) {
      var amount = pagination.pageNumber - pages.currentPage;
      animSwitchSite();

      if (pages.lastShown + pages.containersEl.length - pages.articleEl[0].length <= pages.data.length) {
        //checks if there are still some articles
        pages.lastShown += pages.containersEl.length * amount; // adds pages 

        pages.currentPage += amount;
        setTimeout(function () {
          pages.overwriteCurrent();
        }, 200);
      }
    }
  };
  container.pagination(options);
}); //if in the future u will read it, just know I didn't know how the sql and any back-end language works and the customer didn't like cms so i had to do it like that :/ 

var pages = {
  lastShown: 0,
  currentShown: null,
  currentPage: 1,
  articleEl: [//there are all the dom nodes I will change
  document.getElementsByClassName("products__heading"), document.getElementsByClassName("d-category"), document.getElementsByClassName("d-granite"), document.getElementsByClassName("d-width"), document.getElementsByClassName("d-height"), document.getElementsByClassName("d-price"), document.getElementsByClassName("products__image")],
  scrollTop: function scrollTop() {
    document.getElementById("scroll-top").scrollIntoView({
      behavior: 'smooth'
    });
  },
  containersEl: document.getElementsByClassName("products__card"),
  overwriteCurrent: function overwriteCurrent() {
    var i = 0;

    for (this.currentShown = this.lastShown; this.currentShown < this.containersEl.length + this.lastShown; this.currentShown++) {
      //this one for current article 
      if (this.data[this.currentShown] !== undefined) {
        //  image changing
        debugger;
        this.articleEl[6][i].src = "".concat(this.imageSrc).concat(pages.lastShown + i + 1, ".jpg");
      }

      for (var x = 0; x < this.articleEl.length; x++) {
        //this one for specyfic property
        if (this.data[this.currentShown] == undefined) {
          this.containersEl[i].classList.add("d-none");
        } else if (this.containersEl[i].classList.contains("d-none")) {
          this.containersEl[i].classList.remove("d-none");
          this.articleEl[x][i].textContent = this.data[this.currentShown][x];
        } else if (this.articleEl[x][i] !== undefined) {
          this.articleEl[x][i].textContent = this.data[this.currentShown][x];
        }
      }

      if (this.data[this.currentShown] !== undefined) {
        //  letterNumber changing 
        this.articleEl[0][i].textContent += " ".concat(this.letterNumber + (pages.lastShown + i + 1));
      }

      i++;
    }
  }
};

function animSwitchSite(i) {
  for (var _i = 0; _i < document.getElementsByClassName("products__card").length; _i++) {
    document.getElementsByClassName("products__card")[_i].classList.add("reload-page");
  }

  pages.scrollTop();

  for (var _i2 = 0; _i2 < document.getElementsByClassName("products__card").length; _i2++) {
    document.getElementsByClassName("products__card")[_i2].addEventListener("animationend", function () {
      this.classList.remove("reload-page");
    });
  }
}

document.getElementById("vid").addEventListener("loadeddata", function () {
  for (var i = 0; i < document.getElementsByClassName("menu__list-cont").length; i++) {
    document.getElementsByClassName("menu__list-cont")[i].classList.remove("zero-opacity");
  }
});
var menu = {
  isShowed: false,
  childNumber: null,
  currentElShow: undefined,
  toggle: function toggle() {
    this.isShowed = !this.isShowed;
    document.getElementsByClassName("menu__list-cont")[this.childNumber].classList.toggle("menu__show");
  },
  secondClicked: function secondClicked() {
    if (this.target !== document.getElementsByClassName("menu__list-cont")[menu.childNumber]) {
      menu.toggle();
    }
  },
  clicked: function clicked() {
    if (this.isShowed) {
      document.getElementsByClassName("menu__show")[0].addEventListener("transitionend", menu.secondClicked);

      if (menu.isShowed) {
        menu.isShowed = !menu.isShowed;
        document.getElementsByClassName("menu__show")[0].classList.remove("menu__show");
      }
    } else {
      this.toggle();
    }
  }
};

var _loop = function _loop(i) {
  document.getElementsByClassName("menu")[i].addEventListener("click", function (e) {
    menu.childNumber = i;
    menu.currentElShow = e.target;
    menu.clicked();
    document.getElementsByClassName("menu__list-cont")[menu.childNumber].removeEventListener("transitionend", menu.secondClicked);
  });
};

for (var i = 0; i < document.getElementsByClassName("menu").length; i++) {
  _loop(i);
} // setup for framework easyzoom 


var $easyzoom = $('.easyzoom').easyZoom();
var api = $easyzoom.data('easyZoom');
api.opts.loadingNotice = "ładowanie";
api.opts.errorNotice = "Zdjęcie nie mogło zostać załadowane";
api.opts.linkAttribute = "data-src";
var zoomed = {
  //an object that represents the zoomed element 
  images: document.getElementsByClassName("products__image"),
  isZoomed: false,
  zoomSrc: document.getElementById("zoomSrc"),
  zoomHeader: document.getElementById("zoomHeader"),
  appearZoom: function appearZoom(imgSrc, headingText) {
    this.isZoomed = true;
    this.currentImgSrc = imgSrc;
    this.zoomSrc.src = this.currentImgSrc; //change current image src

    this.zoomHeader.textContent = headingText;
    this.zoomSrc.parentNode.dataset.src = this.currentImgSrc;
    this.zoomEl.classList.remove("no-zoom");
    api.swap();
  },
  disappearZoom: function disappearZoom(el) {
    if (el.target !== document.getElementsByClassName("zoomed__image")[0]) {
      this.zoomEl.classList.add("no-zoom");
      this.isZoomed = false;
    }
  },
  currentImgSrc: null,
  zoomEl: document.getElementById("zoomEl")
};

for (var i = 0; i < zoomed.images.length; i++) {
  zoomed.images[i].addEventListener("click", function (el) {
    zoomed.appearZoom(el.target.src, el.target.nextElementSibling.firstElementChild.textContent);
  });
}

zoomed.zoomEl.addEventListener("click", function (el) {
  if (el.target == document.getElementById("zoomEl") || el.target.parentNode === document.getElementsByClassName("zoomed__close")[0]) {
    zoomed.disappearZoom(el);
  }
}); //when u press esc and zoom is on then zoom disappear

document.onkeydown = function (evt) {
  evt = evt || window.event;

  if (evt.keyCode == 27 && zoomed.isZoomed) {
    zoomed.disappearZoom(zoomed.zoomEl);
  }
};

var arrowBackEl = document.getElementsByClassName("zoomed__arrow--back")[0];
var arrowForwardEl = document.getElementsByClassName("zoomed__arrow--forward")[0];
var isNotPlayingAnim = true;

var handleArrowBackClick = function handleArrowBackClick() {
  var currentElNb = +zoomed.zoomHeader.textContent.substring(zoomed.zoomHeader.textContent.lastIndexOf(pages.letterNumber[pages.letterNumber.length - 1]) + 1, zoomed.zoomHeader.textContent.length);
  console.log(currentElNb);
  debugger;

  if (currentElNb != 1 && isNotPlayingAnim) {
    isNotPlayingAnim = false;
    currentElNb--;
    document.getElementsByClassName("zoomed__cont")[0].classList.add("cont-move-back");
    window.setTimeout(function () {
      zoomed.appearZoom("".concat(pages.imageSrc + currentElNb, ".jpg"), "".concat(pages.data[--currentElNb][0], " ").concat(pages.letterNumber + ++currentElNb));
    }, 700);
  }
};

var handleArrowForwardClick = function handleArrowForwardClick() {
  var currentElNb = +zoomed.zoomHeader.textContent.substring(zoomed.zoomHeader.textContent.lastIndexOf(pages.letterNumber[pages.letterNumber.length - 1]) + 1, zoomed.zoomHeader.textContent.length);

  if (currentElNb != pages.data.length && isNotPlayingAnim) {
    isNotPlayingAnim = false;
    currentElNb++;
    document.getElementsByClassName("zoomed__cont")[0].classList.add("cont-move-forward");
    window.setTimeout(function () {
      zoomed.appearZoom("".concat(pages.imageSrc + currentElNb, ".jpg"), "".concat(pages.data[--currentElNb][0], " ").concat(pages.letterNumber + ++currentElNb));
    }, 700);
  }
};

document.getElementsByClassName("zoomed__cont")[0].addEventListener("animationend", function () {
  document.getElementsByClassName("zoomed__cont")[0].classList.remove("cont-move-forward");
  document.getElementsByClassName("zoomed__cont")[0].classList.remove("cont-move-back");
  isNotPlayingAnim = true;
});
arrowBackEl.addEventListener("click", handleArrowBackClick);
arrowForwardEl.addEventListener("click", handleArrowForwardClick); //disabling zoom on mobile devices

if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)) {
  api.teardown();
}

var startX;
var startY;
var endX;
var endY; //Function to handle swipes

function handleTouch(start, end) {
  //calculate the distance on x-axis and o y-axis. Check wheter had the great moving ratio.
  var xDist = endX - startX;
  var maxDyst = 100;

  if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) && window.matchMedia("(max-width:765px)").matches) {
    if (xDist <= -maxDyst) {
      handleArrowForwardClick();
    } else if (xDist >= maxDyst) {
      handleArrowBackClick();
    }
  }
}

document.getElementsByClassName("zoomed__cont")[0].addEventListener('touchstart', function (event) {
  startX = event.touches[0].clientX;
  startY = event.touches[0].clientY;
});
document.getElementsByClassName("zoomed__cont")[0].addEventListener('touchend', function (event) {
  endX = event.changedTouches[0].clientX;
  endY = event.changedTouches[0].clientY;
  handleTouch(startX, endX);
});